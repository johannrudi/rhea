#!/bin/bash

###############################################################################
#
# Configures the rhea code in the directory from which this script is called.
#
###############################################################################
# Author:             Johann Rudi
###############################################################################

declare -r THIS_ARCHITECTURE="ICES machine with Cent OS for GCC"
declare -r THIS_BLAS_LIBS="-L${MKLROOT}/lib/intel64 -Wl,--no-as-needed -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread -lm -ldl"
declare -r THIS_LAPACK_LIBS="${MKLROOT}/lib/intel64/libmkl_intel_lp64.so"
declare -r THIS_PETSC_DIR="/work/johann/build/app/petsc/petsc-64-opt-centos7-gcc5-mpich2"

########################################
# Functions
########################################

function print_usage()
{
  echo "Usage: configure_centos [-o -p <BUILD_PATH>]"
}

########################################
# Process options
########################################

# initialize parameters
code_dir="$(dirname ${BASH_SOURCE[0]})"
build_dir="$(pwd)"
is_opt=0

# check option flags
while getopts ":hop:" opt; do
  case $opt in
    h) # help
      print_usage; exit 1
      ;;
    o) # optimized build
      is_opt=1
      ;;
    p) # build path/directory
      build_dir="$(dirname $OPTARG)"
      ;;
    \?) # invalid option
      echo "Invalid option: -$OPTARG" >&2; exit 1
      ;;
    :) # option requires argument
      echo "Option -$OPTARG requires an argument" >&2; exit 1
      ;;
  esac
done

########################################
# Run configure
########################################

echo "========================================"
echo "Build rhea for $THIS_ARCHITECTURE"
echo "Code directory:  $code_dir"
echo "Build directory: $build_dir"
echo "Optimized build: $is_opt"
echo "========================================"

if [ 1 -le "$is_opt" ]; then
  # configure optimized build
  $code_dir/configure \
  F77=mpif77 \
   FC=mpifort \
   CC=mpicc \
  CXX=mpicxx \
    CFLAGS="-g -O2 -fopenmp -Wall -DYMIR_PETSC_CUSTOM" \
  CXXFLAGS="-g -O2 -fopenmp -Wall" \
  --enable-mpi \
  --enable-openmp="-fopenmp" \
  --with-fet="$code_dir/fet" \
  --with-petsc="$THIS_PETSC_DIR" \
  BLAS_LIBS="$THIS_BLAS_LIBS" \
  LAPACK_LIBS="$THIS_LAPACK_LIBS"
else
  # configure development build
  $code_dir/configure \
  F77=mpif77 \
   FC=mpifort \
   CC=mpicc \
  CXX=mpicxx \
    CFLAGS="-g -O0 -fopenmp -Wall -DYMIR_PETSC_CUSTOM" \
  CXXFLAGS="-g -O0 -fopenmp -Wall" \
  --enable-debug \
  --enable-mpi \
  --enable-openmp="-fopenmp" \
  --with-fet="$code_dir/fet" \
  --with-petsc="$THIS_PETSC_DIR" \
  BLAS_LIBS="$THIS_BLAS_LIBS" \
  LAPACK_LIBS="$THIS_LAPACK_LIBS"
fi
