rhea Installation
*****************

This document describes how to build and install the rhea library  on Unix
systems.

1 Quick Installation Instructions
*********************************

To install, clone the rhea repository from bitbucket onto your machine (enter
your bitbucket username and password), then change to the cloned directory:

  $ git clone https://bitbucket.org/ccgo/rhea.git rhea
  $ cd rhea

Set up rhea's submodules (requires entering your bitbucket username and
passwort several times):

  $ git submodule init
  $ git submodule update

Prepare rhea for compilation with the `bootstrap` script (this needs to be done
only once after a fresh `git clone`):

  $ ./bootstrap

Now run the usual configure and make cycle:

  $ ./configure
  $ make

The configure script will try to find necessary tools in your path.  When you
run configure you may optionally use the `--program-prefix=PREFIX` argument to
change the default installation directory.

Some systems require unusual options for compilation or linking that the
`configure` script does not know about.  Run `./configure --help` for details
on available optional arguments.

Important configure arguments that (likely) have to be specified are:

  FLAGS="-fopenmp -DYMIR_PETSC_CUSTOM ..."
  CXXFLAGS="-fopenmp ..."
  --enable-openmp="-fopenmp"
  --enable-mpi
  --with-fet=MY_FET_DIRECTORY
  --with-petsc=MY_PETSC_DIRECTORY
  BLAS_LIBS=MY_BLAS_PATH
  LAPACK_LIBS=MY_LAPACK_PATH

where
  
  -fopenmp           = OpenMP flag of the GCC compiler (-openmp for intel),
  MY_FET_DIRECTORY   = Directory of FET, a submodule of rhea; often "rhea/fet"
  MY_PETSC_DIRECTORY = Directory of Petsc installation (custom Petsc version)
  MY_BLAS_PATH       = Path to BLAS libraries for linker
  MY_LAPACK_PATH     = Path to LAPACK libraries for linker

2 Avoid Re-entering of Bitbucket User Name
******************************************

Retrieve the rhea code and submodules from bitbucket via the commands (assuming
`USERNAME` is your bitbucket user name):

  $ git clone https://USERNAME@bitbucket.org/ccgo/rhea.git rhea
  $ cd rhea
  $ ./submodule_init -b USERNAME

Then proceed with the `bootstrap` script, etc.

3 Configure on ICES Machines with CentOS (GCC Compiler)
*******************************************************

After running the `bootstrap` script, ensure that the following modules are
part of your "module default" setup:

  1) c7              3) gdb/7.10        5) gcc/5.2       7) mpich2/3.1.4
  2) autotools/1.2   4) python/2.7.11   6) cmake/3.3.2   8) mkl/15.3

Then change into your build directory and run the script (add the optional flag
`-o` for an optimized build):

  $ cd BUILD_DIRECTORY
  $ RHEA_DIRECTORY/configure_arch_centos [-o]

4 Configure on TACC's Stampede 2 (Intel Compiler)
*************************************************

After running the `bootstrap` script, ensure that the following modules are 
part of your "module default" setup:

  1) intel/17.0.4   3) git/2.9.0       5) python/2.7.13   7) TACC
  2) impi/17.0.3    4) autotools/1.1   6) xalt/1.7        8) valgrind/3.12.0

Then change into your build directory and run the script (add the optional flag
`-o` for an optimized build):

  $ cd BUILD_DIRECTORY
  $ RHEA_DIRECTORY/configure_arch_stampede2 [-o]

References
**********

[1] http://git-scm.com/book

[2] https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor

[3] https://portal.tacc.utexas.edu/user-guides/stampede2
