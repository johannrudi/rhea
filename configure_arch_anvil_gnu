#!/bin/bash

###############################################################################
#
# Configures the rhea code in the directory from which this script is called.
#
# Modules:
#   anaconda/2021.05-py38
#   gcc/11.2.0
#   modtree/cpu
#   gmp/6.2.1
#   mpfr/4.0.2
#   impi/19.0.9
#   mpc/1.1.0
#   zlib/1.2.11
#   numactl/2.0.14
#   libfabric/1.12.0
#   valgrind/3.15.0
#   openmpi/4.0.6
#   boost/1.74.0
#   libtiff/4.1.0
#   emacs/27.2
#   openblas/0.3.17
###############################################################################

declare -r THIS_ARCHITECTURE="Anvil, gnu compiler"\
declare -r THIS_PETSC_DIR_DBG="/home/x-mheldman/build/dev/petsc-rhea"
declare -r THIS_PETSC_DIR_OPT="/home/x-mheldman/build/dev/petsc-rhea"
declare -r THIS_BLAS_LIBS="$OPENBLAS_HOME/lib/libopenblas.a"
declare -r THIS_VALGRIND_INC="$VALGRIND_INCLUDE"

########################################
# Functions
########################################

function print_usage()
{
  echo "Usage: ./configure_arch_anvil_gnu [-o]"
}

########################################
# Process options
########################################

# initialize parameters
is_opt=0
code_dir="$(dirname ${BASH_SOURCE[0]})"
build_dir="$(pwd)"

# check option flags
while getopts ":ho" opt; do
  case $opt in
    h) # help
      print_usage; exit 1
      ;;
    o) # optimized build
      is_opt=1
      ;;
    \?) # invalid option
      echo "Invalid option: -$OPTARG" >&2; exit 1
      ;;
    :) # option requires argument
      echo "Option -$OPTARG requires an argument" >&2; exit 1
      ;;
  esac
done

########################################
# Run configure
########################################

echo "========================================"
echo "Build rhea for $THIS_ARCHITECTURE"
echo "Code directory:  $code_dir"
echo "Build directory: $build_dir"
echo "Optimized build: $is_opt"
echo "========================================"

if [ 1 -le "$is_opt" ]; then
  # configure optimized build
  $code_dir/configure \
    FFLAGS="-g -O3 -fopenmp" \
    CFLAGS="-g -O3 -fopenmp -Wall -w -DYMIR_PETSC_CUSTOM -DFET_DISABLE_DEBUG" \
  CXXFLAGS="-g -O3 -fopenmp -Wall -w" \
  CPPFLAGS="-I${THIS_VALGRIND_INC}" \
  --enable-mpi \
  --enable-openmp="-fopenmp" \
  --with-fet="$code_dir/fet" \
  --with-petsc="$THIS_PETSC_DIR_OPT" \
  BLAS_LIBS="$THIS_BLAS_LIBS"
else
  # configure development build
  $code_dir/configure \
    FFLAGS="-g -O0 -fopenmp" \
    CFLAGS="-g -O0 -fopenmp -Wall -w -DYMIR_PETSC_CUSTOM" \
  CXXFLAGS="-g -O0 -fopenmp -Wall -w" \
  CPPFLAGS="-I${THIS_VALGRIND_INC}" \
  --enable-debug \
  --enable-mpi \
  --enable-openmp="-fopenmp" \
  --with-fet="$code_dir/fet" \
  --with-petsc="$THIS_PETSC_DIR_DBG" \
  BLAS_LIBS="$THIS_BLAS_LIBS"
fi
