#!/bin/bash

###############################################################################
#
# Configures the rhea code in the directory from which this script is called.
#
###############################################################################

########################################
# Setup environment
########################################

# get directories
script_dir="$(dirname ${BASH_SOURCE[0]})"
code_dir="$(dirname $script_dir)"
build_dir="$(pwd)"

# get utility functions
source $script_dir/utils.sh || exit

# call platform-specific setup script
source $script_dir/setup_anvil.sh || exit
print_modules

########################################
# Platform-specific
########################################

THIS_SITE="Anvil, GNU compiler"

# set pairs of directories (develop, performance)
THIS_PETSC_DIR=("/home/x-mheldman/build/dev/petsc-rhea"
                "/home/x-mheldman/build/perf/petsc-rhea")
THIS_RHEAKIT_DIR=("/home/x-johann/build/dev/rhea-kit"
                  "/home/x-johann/build/perf/rhea-kit")

THIS_MPI_DIR=$MPI_HOME
OPENMP_FLAG="-fopenmp"
THIS_VALGRIND_INC="$VALGRIND_INCLUDE"
THIS_PYTHON_LDFLAGS=$(get_python_ldflags)
THIS_PYTHON_LIBS=$(filter -lpython3* "$(get_python_libs)")
THIS_BLAS_LIBS="$OPENBLAS_HOME/lib/libopenblas.a"
#TODO ^ maybe this needs an "-L" in front?

########################################
# Process options
########################################

function print_usage()
{
  echo "Usage: ./$(basename "$0") [-o]"
}

# initialize
is_opt=0

# check option flags
while getopts ":ho" opt; do
  case $opt in
    h) # help
      print_usage; exit 1
      ;;
    o) # optimized build
      is_opt=1
      ;;
    \?) # invalid option
      echo "Invalid option: -$OPTARG" >&2; exit 1
      ;;
    :) # option requires argument
      echo "Option -$OPTARG requires an argument" >&2; exit 1
      ;;
  esac
done

########################################
# Run configure
########################################

fet_dir="$code_dir/fet"
petsc_dir="${THIS_PETSC_DIR[$is_opt]}"
rheakit_dir="${THIS_RHEAKIT_DIR[$is_opt]}"

print_setup "$THIS_SITE" $is_opt "$code_dir" "$build_dir" \
            "$fet_dir" "$petsc_dir" "$rheakit_dir" \
            "$THIS_MPI_DIR" "$OPENMP_FLAG" "$THIS_VALGRIND_INC" "$THIS_PYTHON_LDFLAGS" "$THIS_PYTHON_LIBS" "$THIS_BLAS_LIBS"
print_sep_line

if [ 1 -le "$is_opt" ]; then
  # configure optimized build
  $code_dir/configure \
    FFLAGS="-g -O3 $OPENMP_FLAG" \
    CFLAGS="-g -O3 $OPENMP_FLAG -Wall -w -DYMIR_PETSC_CUSTOM -DFET_DISABLE_DEBUG" \
  CXXFLAGS="-g -O3 $OPENMP_FLAG -Wall -w" \
  CPPFLAGS="-I${THIS_VALGRIND_INC}" \
   LDFLAGS="${THIS_PYTHON_LDFLAGS}" \
      LIBS="${THIS_PYTHON_LIBS}" \
  --enable-mpi \
  --enable-openmp="$OPENMP_FLAG" \
  --with-fet="$fet_dir" \
  --with-petsc="$petsc_dir" \
  --with-rheakit="$rheakit_dir" \
  BLAS_LIBS="$THIS_BLAS_LIBS"
else
  # configure development build
  $code_dir/configure \
    FFLAGS="-g -O0 $OPENMP_FLAG" \
    CFLAGS="-g -O0 $OPENMP_FLAG -Wall -w -DYMIR_PETSC_CUSTOM" \
  CXXFLAGS="-g -O0 $OPENMP_FLAG -Wall -w" \
  CPPFLAGS="-I${THIS_VALGRIND_INC}" \
   LDFLAGS="${THIS_PYTHON_LDFLAGS}" \
      LIBS="${THIS_PYTHON_LIBS}" \
  --enable-debug \
  --enable-mpi \
  --enable-openmp="$OPENMP_FLAG" \
  --with-fet="$fet_dir" \
  --with-petsc="$petsc_dir" \
  --with-rheakit="$rheakit_dir" \
  BLAS_LIBS="$THIS_BLAS_LIBS"
fi

print_sep_line
