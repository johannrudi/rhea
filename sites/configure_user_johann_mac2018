#!/bin/bash

###############################################################################
#
# Configures the rhea code in the directory from which this script is called.
#
# Software environment (via `spack find --loaded`):
# -- darwin-mojave-skylake / gcc@11.1.0 ---------------------------
# hwloc@2.4.1           libevent@2.1.12  libxml2@2.9.10  openblas@0.3.15  openssh@8.5p1   xz@5.2.5
# libedit@3.1-20210216  libiconv@1.16    ncurses@6.2     openmpi@4.0.5    openssl@1.1.1k  zlib@1.2.11
#
# To load call: `spack load openmpi%gcc openblas%gcc`
#
###############################################################################

THIS_ARCHITECTURE="Apple Mac with macOS 10.14 (GCC 11)"
THIS_BLAS_LIBS="$HOME/apps/clang-1100.0.33.17/fblaslapack/3.4.2/lib/libfblas.a"
THIS_LAPACK_LIBS="$HOME/apps/clang-1100.0.33.17/fblaslapack/3.4.2/lib/libflapack.a"
THIS_PETSC_DIR="$HOME/build/dev/rhea_petsc"
#THIS_VALGRIND_INC="$(brew --prefix valgrind)/include/valgrind"
OPENMP_FLAG="-fopenmp"

########################################
# Functions
########################################

function print_usage()
{
  echo "Usage: ./$(basename "$0") [-o]"
}

########################################
# Process options
########################################

# initialize parameters
is_opt=0
code_dir="$(dirname ${BASH_SOURCE[0]})/.."
build_dir="$(pwd)"

# check option flags
while getopts ":ho" opt; do
  case $opt in
    h) # help
      print_usage; exit 1
      ;;
    o) # optimized build
      is_opt=1
      ;;
    \?) # invalid option
      echo "Invalid option: -$OPTARG" >&2; exit 1
      ;;
    :) # option requires argument
      echo "Option -$OPTARG requires an argument" >&2; exit 1
      ;;
  esac
done

########################################
# Run configure
########################################

echo "========================================"
echo "Build rhea for $THIS_ARCHITECTURE"
echo "Code directory:  $code_dir"
echo "Build directory: $build_dir"
echo "Optimized build: $is_opt"
echo "========================================"

if [ 1 -le "$is_opt" ]; then
  # configure optimized build
  $code_dir/configure \
  F77=mpif77 \
   FC=mpif90 \
   CC=mpicc \
  CXX=mpicxx \
    CFLAGS="-g -O2 -Wall -DYMIR_PETSC_CUSTOM -DFET_DISABLE_DEBUG" \
  CXXFLAGS="-g -O2 -Wall" \
  --enable-mpi \
  --enable-openmp="$OPENMP_FLAG" \
  --with-fet="$code_dir/fet" \
  --with-petsc="$THIS_PETSC_DIR" \
  BLAS_LIBS="$THIS_BLAS_LIBS" \
  LAPACK_LIBS="$THIS_LAPACK_LIBS"
else
  # configure development build
  $code_dir/configure \
  F77=mpif77 \
   FC=mpif90 \
   CC=mpicc \
  CXX=mpicxx \
    CFLAGS="-g -O0 -Wall -DYMIR_PETSC_CUSTOM" \
  CXXFLAGS="-g -O0 -Wall" \
  --enable-debug \
  --enable-mpi \
  --enable-openmp="$OPENMP_FLAG" \
  --with-fet="$code_dir/fet" \
  --with-petsc="$THIS_PETSC_DIR" \
  BLAS_LIBS="$THIS_BLAS_LIBS" \
  LAPACK_LIBS="$THIS_LAPACK_LIBS"
fi

# CPPFLAGS="-I${THIS_VALGRIND_INC}" \
