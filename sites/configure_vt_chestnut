#!/bin/bash

###############################################################################
#
# Configures the rhea code in the directory from which this script is called.
#
###############################################################################

THIS_ARCHITECTURE="VT Chestnut, GNU compiler"
THIS_PETSC_DIR_DBG="/home/jrudi/build/dev/petsc-rhea"
THIS_PETSC_DIR_OPT="/home/jrudi/build/perf/petsc-rhea"
THIS_RHEAKIT_DIR_DBG="/home/jrudi/build/dev/rhea-kit"
THIS_RHEAKIT_DIR_OPT="/home/jrudi/build/perf/rhea-kit"
THIS_VALGRIND_INC="/usr/include/valgrind"

########################################
# Functions
########################################

function print_usage()
{
  echo "Usage: ./$(basename "$0") [-o]"
}

function filter()
{
  local pattern=$1
  local input_string=$2
  local output_string=()

  for s in $input_string; do
    if [[ "$s" == $pattern ]] ; then
      output_string+=("$s")
    fi
  done
  echo "${output_string[@]}"
}

function filter_out()
{
  local pattern=$1
  local input_string=$2
  local output_string=()

  for s in $input_string; do
    if [[ "$s" == $pattern ]] ; then
      continue
    fi
    output_string+=("$s")
  done
  echo "${output_string[@]}"
}

########################################
# Process options
########################################

# initialize parameters
is_opt=0
script_dir="$(dirname ${BASH_SOURCE[0]})"
code_dir="$script_dir/.."
build_dir="$(pwd)"

# check option flags
while getopts ":ho" opt; do
  case $opt in
    h) # help
      print_usage; exit 1
      ;;
    o) # optimized build
      is_opt=1
      ;;
    \?) # invalid option
      echo "Invalid option: -$OPTARG" >&2; exit 1
      ;;
    :) # option requires argument
      echo "Option -$OPTARG requires an argument" >&2; exit 1
      ;;
  esac
done

########################################
# Setup environment
########################################

source $script_dir/setup_vt_chestnut.sh || exit

echo "========================================"
echo "Modules:"
module -t list 2>&1 | sort

THIS_BLAS_LIBS="-L${MKLROOT}/lib/intel64 -Wl,--no-as-needed -lmkl_intel_ilp64 -lmkl_tbb_thread -lmkl_core -lpthread -lm -ldl"
THIS_PYTHON_LDFLAGS=$(filter -L* "$(python3-config --ldflags --embed)")
THIS_PYTHON_LIBS=$(filter_out -L* "$(python3-config --ldflags --embed)")
OPENMP_FLAG="-fopenmp"

########################################
# Run configure
########################################

echo "========================================"
echo "Build rhea for $THIS_ARCHITECTURE"
echo "Code directory:  $code_dir"
echo "Build directory: $build_dir"
echo "Optimized build: $is_opt"
echo "========================================"

if [ 1 -le "$is_opt" ]; then
  # configure optimized build
  $code_dir/configure \
    FFLAGS="-g -O3 $OPENMP_FLAG" \
    CFLAGS="-g -O3 $OPENMP_FLAG -Wall -DYMIR_PETSC_CUSTOM -DFET_DISABLE_DEBUG" \
  CXXFLAGS="-g -O3 $OPENMP_FLAG -Wall" \
  CPPFLAGS="-I${THIS_VALGRIND_INC}" \
   LDFLAGS="${THIS_PYTHON_LDFLAGS}" \
      LIBS="${THIS_PYTHON_LIBS}" \
  --enable-mpi \
  --enable-openmp="$OPENMP_FLAG" \
  --with-fet="$code_dir/fet" \
  --with-petsc="$THIS_PETSC_DIR_OPT" \
  --with-rheakit="$THIS_RHEAKIT_DIR_OPT" \
  BLAS_LIBS="$THIS_BLAS_LIBS"
else
  # configure development build
  $code_dir/configure \
    FFLAGS="-g -O0 $OPENMP_FLAG" \
    CFLAGS="-g -O0 $OPENMP_FLAG -Wall -DYMIR_PETSC_CUSTOM" \
  CXXFLAGS="-g -O0 $OPENMP_FLAG -Wall" \
  CPPFLAGS="-I${THIS_VALGRIND_INC}" \
   LDFLAGS="${THIS_PYTHON_LDFLAGS}" \
      LIBS="${THIS_PYTHON_LIBS}" \
  --enable-debug \
  --enable-mpi \
  --enable-openmp="$OPENMP_FLAG" \
  --with-fet="$code_dir/fet" \
  --with-petsc="$THIS_PETSC_DIR_DBG" \
  --with-rheakit="$THIS_RHEAKIT_DIR_DBG" \
  BLAS_LIBS="$THIS_BLAS_LIBS"
fi

echo "========================================"
